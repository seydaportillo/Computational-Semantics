# -*- coding: utf-8 -*-
"""(Assignment 1) CompSem@UPF - WordNet and word senses adlı not defterinin kopyası

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o1exSO48qtgp0SFyfVmZTNOXoBjBZoId

# WordNet: a lexical semantic database

Documentation for the coding part of the assignment: https://www.nltk.org/howto/wordnet.html

First, let's load NLTK, which contains WordNet in a convenient format.
"""

try:
    import nltk
except ModuleNotFoundError:
    ! pip install nltk
nltk.download('wordnet')
nltk.download('omw-1.4') # this downloads the Open Multilingual WordNet
from nltk.corpus import wordnet

"""---
★ **Exercise 1:** Take the word "study". How many wordnet **synsets** does the word have?
"""

study_synsets = wordnet.synsets("study")
print(study_synsets)
### prettier output:
for s in study_synsets:
  print(s)

print()
print(f'The word "study" has {len(study_synsets)} synsets.')

"""How many of those are for the word as a noun?"""

study_synsets_noun = wordnet.synsets("study", pos=wordnet.NOUN)
print(f'{len(study_synsets_noun)} of the synsets of the word "study" correspond to "study" as a noun.')

"""---
★ **Exercise 2:** For every noun synset of “study”, print the synset's name, definition, and examples. Would you agree that all synsets capture distinct `senses` of the word? Why (not)? Discuss.
"""

for study_synset in study_synsets_noun:
    print()
    print(study_synset.name())
    print(study_synset.definition())
    print(study_synset.examples())

"""It is true that all syntaxes of the word capture a different meaning of the word. This is because what any given word represents in our minds depends largely on the context and what part of the sentence it is used in.

---
★ **Exercise 3:** For the same synsets, together with the previous pieces of information, also print the words each synset contains, i.e., the names of its English lemmas. Do you agree that the words for each synset are valid synonyms? Why (not)? Discuss.
"""

for study_synset in study_synsets_noun:
    print()
    print(f'synset name: {study_synset.name()}')
    print(study_synset.definition())
    print(study_synset.examples())
    print(f'lemmas: {study_synset.lemma_names()}')

"""The words for each synset are not necessarily synonyms but they are related. For example study and report are not identical but they can be replaced by each other in certain context. We cannot replace 'study' with 'report' in 'I studied programming' because if we say 'I reported programming' the meaning of the sentence would change drastically. However, after a study we usually write a report therefore they are related.

---
★ **Exercise 4:** Repeat exercises 1-3 for the verb senses of "study".
"""

study_synsets_verb = wordnet.synsets("study", pos=wordnet.VERB)
print(f'{len(study_synsets_verb)} of the synsets of the word "study" correspond to "study" as a verb.')

for study_synset in study_synsets_verb:
  print()
  print(study_synset.verb_groups())
  print(study_synset.definition())
  print(study_synset.examples())

for study_synset in study_synsets_verb:
    print()
    print(f'synset name: {study_synset.name()}')
    print(study_synset.definition())
    print(study_synset.examples())
    print(f'lemmas: {study_synset.lemma_names()}')

"""---
★ **Exercise 5:** The WordNet version in NLTK has all the languages covered in the Open Multilingual WordNet. Print the list of languages which NLTK currently offers. Which of these languages are you reasonably proficient in? (**Note**: These list of languages are coded according to the ISO 639-3 standard. See https://en.wikipedia.org/wiki/ISO_639-3 in case of doubt.)
"""

#print(wordnet.langs())
#this yields a prettier format:
#ca = study_synset.lemma_names(lang='cat') to force WordNet to print the complete list in case does not retrieve it automatically
sorted(wordnet.langs())

"""---
★ **Exercise 6:** The wordnet function all_lemma_names() has a lang argument, but the function all_synsets() does not. Why is that?
"""

len(list(wordnet.all_lemma_names(pos='v', lang='cmn')))

"""This is because the all_synsets function is intended to retrieve all synsets for a particular part of speech

---
★ **Exercise 7:** Going back to the noun "study", in addition to printing the names of its English lemmas, also print the names of its **Catalan** lemmas. What does this tell you about the structure of WordNet in how it represents different languages?
"""

for study_synset in study_synsets_noun:
    print()
    print(f'synset name: {study_synset.name()}')
    print(study_synset.definition())
    print(study_synset.examples())
    print(f'lemmas: {study_synset.lemma_names(lang="cat")}')

"""WordNet is more knowledgable about the English lemmas of the same word compared to Catalan language. Catalan lemmas are printed mostly as blank lists. This shows that the database that WordNet has is limited in some languages while it is broader in other more commonly spoken languages like English.

---
★ **Exercise 8:** Do the same for a couple of words in a language that you speak, is in Open Multilingual WordNet, and is not English. How well does WordNet represents the semantics of your chosen language?
"""
# Try definining a function that prints the relevant information
# for a word in your chosen language
# and takes a word as argument

def word_lemma_list(word, language):

  word_synset_noun = wordnet.synsets(word, pos=wordnet.NOUN)
  all_lemmas= []
  for syn in word_synset_noun:
    my_lemmas = syn.lemma_names(lang=language)
    all_lemmas.append(my_lemmas)
    print(my_lemmas)
    return all_lemmas

word_lemma_list('market','spa')

"""Prints only one single lemma while it was possible to print 'bolsa' and 'lonja' which are not identical with mercado yet can be replacable in certain context"""

word_lemma_list('market','ita')

"""Mercato and commercio can be substituted by each other but still are not identical. It seems like WordNet has a very limited representation in Italian compared to English but still better represented than Spanish.

---
★ **Exercise 9:** For all languages in WordNet, print how many lemmas the language has in WordNet. (Even when efficiently coded this can take a minute to run.) Which are the 5 languages that are best represented? And the 5 languages that have the lowest coverage? (Remember the ISO code.) 

print('Number of lemmas per language:')
languages = ['als','arb','bul','cat','cmn','dan','ell','eng','eus','fin','fra','glg','heb','hrv','ind','isl','ita','ita_iwn','jpn','lit','nld','nno','nob','pol','por','ron','slk','slv','spa','swe','tha','zsm']
pos = 'v'
lemma_counts = {}
for lang in languages:
    lemma_counts[lang] = len(list(wordnet.all_lemma_names(pos=pos, lang=lang)))
for lang, count in lemma_counts.items():
    print(f"{lang.capitalize()} WordNet: {count}")

total_lemmas = sum(lemma_counts.values())
lemma_ratios = {lang: count / total_lemmas for lang, count in lemma_counts.items()}
sorted_languages = sorted(lemma_ratios.items(), key=lambda x: x[1], reverse=True)
top_5_languages = sorted_languages[:5]
bottom_5_languages = sorted_languages[-5:]

print('Top 5 Languages with Highest Coverage:')
for lang, ratio in top_5_languages:
    print(f"{lang.capitalize()}: {ratio:.4f}")

print('\nBottom 5 Languages with Lowest Coverage:')
for lang, ratio in bottom_5_languages:
    print(f"{lang.capitalize()}: {ratio:.4f}")

"""---

# Try definining a function that prints the hypernyms of the synsets of a word
def print_hypernyms(word):
    synsets = wordnet.synsets(word)
    if not synsets:
        print(f"No synsets found for '{word}'")
        return

    for synset in synsets:
        print(f"Synset: {synset.name()} - {synset.definition()}")
        hypernyms = synset.hypernyms()
        if hypernyms:
            print("Hypernyms:")
            for hypernym in hypernyms:
                print(f"  - {hypernym.name()} - {hypernym.definition()}")
        else:
            print("No hypernyms found for this synset.")
        print()

words = ['collaboration', 'red', 'cat']

for word in words:
    print_hypernyms(word)

# Then execute it with different words
word = ['shop']

for word in word:
    print_hypernyms(word)

word = ['back']

for word in word:
    print_hypernyms(word)
